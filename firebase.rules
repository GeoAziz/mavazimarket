
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Products: Publicly readable, Admin write
    match /products/{productId} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.token.admin == true;
      // Reviews subcollection
      match /reviews/{reviewId} {
        allow read: if true;
        allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
        allow update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
      }
    }

    // Categories: Publicly readable, Admin write
    match /categories/{categoryId} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.token.admin == true;
    }

    // Users:
    // User can create their own document.
    // User can read and update their own document.
    // Admins can read all user documents and update them.
    match /users/{userId} {
      allow create: if request.auth != null && request.auth.uid == userId;
      allow read, update: if request.auth != null && (request.auth.uid == userId || request.auth.token.admin == true);
      // allow delete: if request.auth != null && (request.auth.uid == userId || request.auth.token.admin == true); // Decide on delete policy
    }

    // Orders: 
    // User can create orders for themselves.
    // User can read/update/delete their own orders.
    // Admin can read/update/delete all orders.
    match /orders/{orderId} {
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow read, update, delete: if request.auth != null && 
                                     ( (resource.data.userId == request.auth.uid) || 
                                       (request.auth.token.admin == true) 
                                     );
    }
    
    // Discounts: Authenticated users read, Admin write (placeholder)
    match /discounts/{discountId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.token.admin == true;
    }

    // Settings: Public read for general, admin write
    // The 'general' document holds all settings, including themeAppearance.
    match /settings/general {
      allow read: if true;
      allow write: if request.auth != null && request.auth.token.admin == true;
    }

    // Fallback: Deny all other direct reads/writes to other paths not explicitly defined.
    // This makes it more secure by default.
    match /{path=**}/documents/{document} {
        allow read, write: if false;
    }
  }
}
